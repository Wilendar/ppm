version: '3.8'

services:
  # PostgreSQL - Primary Database
  postgres:
    image: postgres:14-alpine
    container_name: ppm-postgres
    environment:
      POSTGRES_DB: ppm_db
      POSTGRES_USER: ppm_user
      POSTGRES_PASSWORD: ppm_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    networks:
      - ppm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ppm_user -d ppm_db"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MySQL - PrestaShop Compatibility Database
  mysql:
    image: mysql:8.0
    container_name: ppm-mysql
    environment:
      MYSQL_ROOT_PASSWORD: mysql_root_password
      MYSQL_DATABASE: ppm_prestashop
      MYSQL_USER: ppm_mysql_user
      MYSQL_PASSWORD: ppm_mysql_password
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - ppm-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis - Cache and Sessions
  redis:
    image: redis:7-alpine
    container_name: ppm-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ppm-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: redis-server --appendonly yes --requirepass redis_password

  # Backend API (Node.js/Express)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: ppm-backend
    environment:
      NODE_ENV: development
      PORT: 3000
      
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ppm_db
      DB_USER: ppm_user
      DB_PASSWORD: ppm_password
      
      # MySQL Configuration (for PrestaShop compatibility)
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_DATABASE: ppm_prestashop
      MYSQL_USER: ppm_mysql_user
      MYSQL_PASSWORD: ppm_mysql_password
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redis_password
      
      # JWT Configuration
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_REFRESH_SECRET: your-super-secret-refresh-key-change-in-production
      
      # OAuth Configuration (will be set from .env file)
      GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      MICROSOFT_CLIENT_ID: ${MICROSOFT_CLIENT_ID}
      MICROSOFT_CLIENT_SECRET: ${MICROSOFT_CLIENT_SECRET}
      
      # Application Configuration
      BASE_URL: http://localhost:3000
      FRONTEND_URL: http://localhost:5173
      
      # File Upload
      UPLOAD_PATH: /app/uploads
      MAX_FILE_SIZE: 10485760
      
      # Encryption
      ENCRYPTION_KEY: your-encryption-key-32-chars-long
      
    ports:
      - "3000:3000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - backend_uploads:/app/uploads
    networks:
      - ppm-network
    depends_on:
      postgres:
        condition: service_healthy
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Frontend (React/Vite)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: ppm-frontend
    environment:
      VITE_API_URL: http://localhost:3000/api/v1
      VITE_UPLOAD_URL: http://localhost:3000/uploads
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - ppm-network
    depends_on:
      - backend

  # Nginx Load Balancer/Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ppm-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - backend_uploads:/var/www/uploads:ro
    networks:
      - ppm-network
    depends_on:
      - backend
      - frontend

  # phpMyAdmin for MySQL management
  phpmyadmin:
    image: phpmyadmin:latest
    container_name: ppm-phpmyadmin
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: ppm_mysql_user
      PMA_PASSWORD: ppm_mysql_password
      MYSQL_ROOT_PASSWORD: mysql_root_password
    ports:
      - "8080:80"
    networks:
      - ppm-network
    depends_on:
      - mysql

  # pgAdmin for PostgreSQL management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ppm-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@ppm.local
      PGADMIN_DEFAULT_PASSWORD: pgadmin_password
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "8081:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - ppm-network
    depends_on:
      - postgres

networks:
  ppm-network:
    driver: bridge
    name: ppm-network

volumes:
  postgres_data:
    name: ppm-postgres-data
  mysql_data:
    name: ppm-mysql-data
  redis_data:
    name: ppm-redis-data
  backend_uploads:
    name: ppm-backend-uploads
  pgadmin_data:
    name: ppm-pgadmin-data