// PPM (PrestaShop Product Manager) Database Schema
// Based on design.md Section 2.3 - Complete production-ready schema
// Author: Kamil Wili≈Ñski
// Version: 2.0

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["views", "relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Connection pooling configuration (5-20 connections per design.md)
  directUrl = env("DATABASE_DIRECT_URL")
}

// Users and Authentication - Enhanced per design.md
model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  name              String
  role              Role      @default(USER)
  oauth_provider    OAuthProvider?
  oauth_id          String?
  avatar_url        String?
  preferences       Json      @default("{}")
  created_at        DateTime  @default(now()) @db.Timestamptz
  updated_at        DateTime  @updatedAt @db.Timestamptz
  last_login_at     DateTime? @db.Timestamptz

  // Relations
  created_products  Product[]     @relation("ProductCreator")
  created_shops     Shop[]        @relation("ShopCreator")
  user_shops        UserShop[]
  sync_history      SyncHistory[]
  jobs              Job[]

  // Validation constraints applied via migration: 002_add_validation_constraints.sql
  @@map("users")
}

// PrestaShop Shop Connections - Enhanced per design.md
model Shop {
  id                 Int        @id @default(autoincrement())
  name               String
  url                String
  api_key_encrypted  String     // Encrypted API key
  prestashop_version String
  status             ShopStatus @default(ACTIVE)
  last_sync_at       DateTime?  @db.Timestamptz
  created_by         Int
  settings           Json       @default("{}")
  created_at         DateTime   @default(now()) @db.Timestamptz
  updated_at         DateTime   @updatedAt @db.Timestamptz

  // Relations
  creator            User              @relation("ShopCreator", fields: [created_by], references: [id])
  users              UserShop[]
  product_data       ProductShopData[]
  categories         Category[]
  image_data         ImageShopData[]
  sync_history       SyncHistory[]

  // Validation constraints applied via migration: 002_add_validation_constraints.sql
  @@map("shops")
}

// Junction table for users and shops (many-to-many)
model UserShop {
  id      Int @id @default(autoincrement())
  user_id Int
  shop_id Int

  // Relations
  user    User @relation(fields: [user_id], references: [id], onDelete: Cascade)
  shop    Shop @relation(fields: [shop_id], references: [id], onDelete: Cascade)

  @@unique([user_id, shop_id])
  @@map("user_shops")
}

// Central Product Catalog - Enhanced per design.md
model Product {
  id               Int           @id @default(autoincrement())
  sku              String        @unique
  base_name        String
  base_description String?       @db.Text
  status           ProductStatus @default(DRAFT)
  created_by       Int
  created_at       DateTime      @default(now()) @db.Timestamptz
  updated_at       DateTime      @updatedAt @db.Timestamptz

  // Relations
  creator          User              @relation("ProductCreator", fields: [created_by], references: [id])
  shop_data        ProductShopData[]
  images           ProductImage[]
  categories       ProductCategory[]
  sync_history     SyncHistory[]

  @@index([sku])
  @@index([status])
  // Validation constraints applied via migration: 002_add_validation_constraints.sql
  @@map("products")
}

// Shop-Specific Product Data - Enhanced per design.md
model ProductShopData {
  id                Int                 @id @default(autoincrement())
  product_id        Int
  shop_id           Int
  name              String
  description       String?             @db.Text
  short_description String?             @db.Text
  price             Decimal             @db.Decimal(10, 2)
  sale_price        Decimal?            @db.Decimal(10, 2)
  status            ProductShopStatus   @default(INACTIVE)
  prestashop_id     Int?
  last_synced_at    DateTime?           @db.Timestamptz
  sync_status       SyncStatus          @default(PENDING)
  metadata          Json                @default("{}")
  created_at        DateTime            @default(now()) @db.Timestamptz
  updated_at        DateTime            @updatedAt @db.Timestamptz

  // Relations
  product           Product             @relation(fields: [product_id], references: [id], onDelete: Cascade)
  shop              Shop                @relation(fields: [shop_id], references: [id], onDelete: Cascade)

  @@unique([product_id, shop_id])
  @@index([product_id, shop_id])
  @@index([sync_status])
  @@map("product_shop_data")
}

// Categories per Shop - Enhanced per design.md
model Category {
  id            Int      @id @default(autoincrement())
  shop_id       Int
  name          String
  parent_id     Int?
  prestashop_id Int?
  level         Int      @default(0)
  position      Int      @default(0)
  active        Boolean  @default(true)
  created_at    DateTime @default(now()) @db.Timestamptz
  updated_at    DateTime @updatedAt @db.Timestamptz

  // Relations
  shop          Shop              @relation(fields: [shop_id], references: [id], onDelete: Cascade)
  parent        Category?         @relation("CategoryParent", fields: [parent_id], references: [id])
  children      Category[]        @relation("CategoryParent")
  products      ProductCategory[]

  @@index([shop_id, parent_id])
  @@map("categories")
}

// Product-Category Relationships per Shop - Enhanced per design.md
model ProductCategory {
  product_id  Int
  category_id Int
  shop_id     Int
  is_default  Boolean  @default(false)
  created_at  DateTime @default(now()) @db.Timestamptz

  // Relations
  product     Product  @relation(fields: [product_id], references: [id], onDelete: Cascade)
  category    Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  @@id([product_id, category_id, shop_id])
  @@map("product_categories")
}

// Image Management - Enhanced per design.md
model ProductImage {
  id                Int      @id @default(autoincrement())
  product_id        Int
  filename          String
  original_filename String
  file_path         String   @db.Text
  file_size         Int
  mime_type         String
  width             Int
  height            Int
  alt_text          String?
  position          Int      @default(0)
  is_main           Boolean  @default(false)
  created_at        DateTime @default(now()) @db.Timestamptz

  // Relations
  product           Product           @relation(fields: [product_id], references: [id], onDelete: Cascade)
  shop_data         ImageShopData[]

  @@index([product_id, position])
  @@map("images")
}

// Synchronization History - Enhanced per design.md
model SyncHistory {
  id            Int         @id @default(autoincrement())
  shop_id       Int
  product_id    Int?
  action        SyncAction
  status        SyncResult
  error_message String?     @db.Text
  data_snapshot Json?
  performed_by  Int
  performed_at  DateTime    @default(now()) @db.Timestamptz

  // Relations
  shop          Shop        @relation(fields: [shop_id], references: [id])
  product       Product?    @relation(fields: [product_id], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [performed_by], references: [id])

  @@index([shop_id, product_id])
  @@index([performed_at(sort: Desc)])
  @@map("sync_history")
}

// Shop-Specific Image Data - NEW per design.md
model ImageShopData {
  id            Int        @id @default(autoincrement())
  image_id      Int
  shop_id       Int
  alt_text      String?
  position      Int        @default(0)
  prestashop_id Int?
  sync_status   SyncStatus @default(PENDING)
  created_at    DateTime   @default(now()) @db.Timestamptz
  updated_at    DateTime   @updatedAt @db.Timestamptz

  // Relations
  image         ProductImage @relation(fields: [image_id], references: [id], onDelete: Cascade)
  shop          Shop         @relation(fields: [shop_id], references: [id], onDelete: Cascade)

  @@unique([image_id, shop_id])
  @@map("image_shop_data")
}

// Import/Export Jobs - NEW per design.md
model Job {
  id               Int       @id @default(autoincrement())
  type             JobType
  status           JobStatus @default(PENDING)
  progress         Int       @default(0)
  total_items      Int       @default(0)
  processed_items  Int       @default(0)
  error_count      Int       @default(0)
  config           Json
  results          Json?
  started_by       Int
  started_at       DateTime? @db.Timestamptz
  completed_at     DateTime? @db.Timestamptz
  created_at       DateTime  @default(now()) @db.Timestamptz

  // Relations
  user             User      @relation(fields: [started_by], references: [id])

  @@map("jobs")
}

// Enums - Enhanced per design.md
enum Role {
  USER
  MANAGER
  ADMIN
}

enum OAuthProvider {
  GOOGLE
  MICROSOFT
}

enum ShopStatus {
  INACTIVE
  ACTIVE
  ERROR
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum ProductShopStatus {
  DRAFT
  ACTIVE
  INACTIVE
  ARCHIVED
}

enum SyncStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum SyncAction {
  CREATE
  UPDATE
  DELETE
  SYNC
}

enum SyncResult {
  PENDING
  SUCCESS
  FAILED
}

enum JobType {
  IMPORT
  EXPORT
  SYNC
}

enum JobStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

// Database Indexes - Performance-critical indexes per design.md Section 2.3.2
// Applied via migration file: 001_add_critical_indexes.sql
//
// CRITICAL INDEXES IMPLEMENTED:
// User table: email, oauth_provider, role, created_at
// Shop table: status, created_by, last_sync_at, prestashop_version  
// Product table: sku, status, created_by, created_at (sku+status already in @@index)
// ProductShopData table: product_shop, sync_status, prestashop_id, last_synced_at, status
// Category table: shop_parent, prestashop_id, active  
// ProductCategory table: product_id, category_id, shop_id, is_default
// ProductImage table: product_position, is_main, product_main
// SyncHistory table: shop_product, performed_at, status, action, performed_by
// ImageShopData table: sync_status, prestashop_id
// Job table: status, type, started_by, created_at, started_at, status_type
// UserShop table: user_id, shop_id
// 
// COMPOSITE INDEXES FOR COMMON QUERIES:
// products(status, created_at), product_shop_data(shop_id, status),
// product_shop_data(sync_status, shop_id), sync_history(shop_id, status, performed_at)